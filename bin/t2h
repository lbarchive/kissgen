#!/usr/bin/env bash
# Copyright (c) 2018 Yu-Jie Lin
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


NAME=t2h


# encode HTML reserved entities [1] from standard input, and send result to
# standard output.
# [1] https://developer.mozilla.org/en-US/docs/Glossary/Entity#Reserved_characters
t2h_html_encode()
{
    sed -e 's/&/\&amp;/g'   \
        -e 's/</\&lt;/g'    \
        -e 's/>/\&gt;/g'    \
        -e 's/"/\&quot;/g'
}


#############
# timestamp #
#############


# get file $1 modification time in seconds from Unix epoch
t2h_get_ts()
{
    stat -c %Y "$1"
}


# set file $2 modification time to $1 in seconds from Unix epoch
t2h_set_ts()
{
    touch -d @"$1" "$2"
}


#########
# hooks #
#########


# run $1 hook with stdin input
# if $2 == 1 and ! -z $text, then echo
t2h_do_hook()
{
    local hook="t2h_hook_$1[@]"
    local text="$(cat)"
    for f in ${!hook}; do
        text="$(echo -n "$text" | $f)"
    done
    if [[ ! -z "$text" ]]; then
        echo -n "$text"
        if (($2)); then
            echo
        fi
    fi
}


###################
# builtin filters #
###################


# linkify the URL part in the following form and occupies a whole line:
#
#   [X] URL
#
# It consists of the following parts in order:
#
# - any number of spaces for indentation
# - "[X]": X is a single character
# - one space
# - URL:
#   - starts with
#     - file
#     - ftp
#     - http
#     - mailto
#     - "." for relative path
#     - "/": absolute path or protocol-relative (//host/...) [1]
#       [1] https://en.wikipedia.org/wiki/URL#prurl
#   - ends with the EOL
t2h_filter_linkify()
{
    sed -r \
        -e 's_^( *\[.\] )((file|ftp|http|mailto).+|(\.|/).*)$_\1<a href="\2">\2</a>_g'
}


# convert a standalone line of image URL to <img>
# accepted URL
# - file
# - ftp
# - http*
# - "."
# " "/"
# accepted extensions:
# - gif
# - jpg|jpeg
# - png
#
# FIXME alt [1]
# [1] https://www.w3.org/TR/html51/semantics-embedded-content.html#alt-text
t2h_filter_url2img()
{
    sed -r \
        -e 's_^( *)((file|ftp|http|\.|/).+\.(gif|jpeg|jpg|png))$_\1<img src="\2">_g'
}


#################
# configuration #
#################


_T2H_CONF='.t2h.sh'


t2h_source_conf()
{
    echo "$NAME: [source] $1"
    source "$1"
    T2H_CONF="$1"
}


##############
# conversion #
##############


t2h_conv()
{
    local title="${T2H_TITLE:-$1}"

    echo '<!DOCTYPE html>'

    echo -n '<title>'
    echo "$title" | t2h_html_encode | t2h_do_hook title 0
    echo   '</title>'
    echo -n | t2h_do_hook after_title 1

    echo -n | t2h_do_hook before_pre 1
    echo -n '<pre>'
    t2h_html_encode | t2h_do_hook pre 0
    echo   '</pre>'
    echo -n | t2h_do_hook after_pre 0
}


################
# command-line #
################


t2h_usage()
{
    echo "Usage: $(basename "$0") [OPTIONS]... <text> <html>"
}


T2H_HELP="Converting plain text file to HTML

Options:
    -c <t2h.sh>     configuration script (D=<text's dir>/$T2H_CONF)
    -t <title>      title

    -h              this help message
"


t2h_parse()
{
    OPTIND=1
    while getopts "c:t:h" ARG; do
        case "$ARG" in
            c)  T2H_OPT_CONF="$OPTARG";;
            t)  T2H_TITLE="$OPTARG";;
            h)
                t2h_usage
                t2h_help
                exit 0
                ;;
        esac
    done

    shift $((OPTIND - 1))

    if (($# != 2)); then
        t2h_usage >&2
        exit 1
    fi

    T2H_TEXT_FILE="$1"
    T2H_HTML_FILE="$2"
}


t2h_main()
{
    t2h_parse "$@"

    local tf="$T2H_TEXT_FILE"   # input text file
    local hf="$T2H_HTML_FILE"   # output HTML file

    local upd_ts=0
    if [[ "$tf" != - && "$hf" != - ]]; then
        # only check timestamp with $hf exists
        if [[ -f "$hf" ]] \
        && (($(t2h_get_ts "$tf") == $(t2h_get_ts "$hf"))); then
            echo "$NAME: [SKIP] $tf"
            return 0
        fi
        upd_ts=1
    else
        [[ "$tf" == - ]] && tf='/dev/stdin'
        [[ "$hf" == - ]] && hf='/dev/stdout'
    fi

    # check if $tf readable
    if [[ ! -r "$tf" ]]; then
        echo "$tf is not readable!" >&2
        return 1
    fi

    # expose directory conf for $T2H_OPT_CONF, so it can source if needs to
    T2H_DIR_CONF="$(dirname "$tf")/$_T2H_CONF"
    if [[ -r "$T2H_OPT_CONF" ]]; then
        t2h_source_conf "$T2H_OPT_CONF"
    elif [[ -r "$T2H_DIR_CONF" ]]; then
        t2h_source_conf "$T2H_DIR_CONF"
    fi

    # create non-existing directories
    local hd="$(dirname "$hf")"
    if [[ ! -d "$hd" ]]; then
        echo "$NAME: [mkdir] $hd"
        mkdir -p "$hd"
    fi

    t2h_conv "$(basename "$tf")" < "$tf" > "$hf"

    if ((upd_ts)); then
        t2h_set_ts "$(t2h_get_ts "$tf")" "$hf"
    fi
}


[[ "$0" != "$BASH_SOURCE" ]] || t2h_main "$@"
